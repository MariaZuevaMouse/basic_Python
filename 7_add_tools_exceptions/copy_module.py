#       Хранение списков в памяти
# При работе со списками стоит помнить, что если мы переприсваиваем список
# в другую переменную a = b и меняем значения внутри нового списка b[1],
# значения изменятся и внутри старого списка a[1], т.к. ссылки на элементы
# списка остаются на своих местах в памяти и каждый список использует одни и те же элементы.
#        Изменение элементов списка в функции
# При передаче списка параметром в функцию нужно быть особенно внимательными:
# функция может изменить элемент списка внутри основной программы.
#
#       Методы копирования списка
#  - Создание среза от начала и до конца списка my_list[:].
#  - Метод copy у самого списка.
#
#       Модуль copy
#  - Применяется для полного (глубокого) копирования списка.
#  - Используется функция deepcopy.
#  - b = copy.deepcopy(a).


a = 1
b = a
b = 100
# a is not changed
print(a)
print(b)

# other behaving in lists
a = [1, 2, 3]
b = a
b[1] = 100
print(a)
print(b)

# ___________________________

numbers = [1, 2, 3]


def change_number_in_list(input_list):
    input_list[1] = 200


change_number_in_list(numbers)

print(numbers)

# ____________________________

a = [1, 2, 3]
b = a[:]  # копирование с помощью среза
b[1] = 300
print(a)  # list a is not changed
print(b)

b = a.copy()  # копирование с помощью метода copy()
b[1] = 200
print(a)  # list a is not changed
print(b)

#  этот способ не работает для вложенных списков

a = [1, 2, [1, 2]]
b = a[:]

b[2][1] = 200
print(a)  # a is changed and b is changed

#  deepcopy for full copy should be used (all levels is copied
import copy

a = [1, 2, [1, 2]]
b= copy.deepcopy(a)
b[2][1] = 200

print(a)  # list a is not changed
print(b)